#!/bin/bash

. ${NEEDSOME_TEST_HOME}/lib/bashunit-coverage

TEMPDIRBASE=/tmp/bashunit
TEMPDIR="$TEMPDIRBASE/$$"

rm -rf "$TEMPDIRBASE"
mkdir -p "$TEMPDIR"

COUNTSUM=0
COUNTSUCC=0
COUNTFAIL=0
COUNTERROR=0
COUNTSKIPPED=0

ORIGPATH="$PATH"

function getfunctions() {
	set | grep -F ' () ' | grep -E '() $' | sort | sed -e 's/ () //'
}

function callfile() { 
	export NEEDSOME_TEST_TESTCASE="$(basename "$1" .bashunit)"
	export NEEDSOME_TEST_TESTCASE_DIR="$(cd "$(dirname "$1")"; pwd -P)"
	export NEEDSOME_TESTEE_DIR="$(echo "$NEEDSOME_TEST_TESTCASE_DIR" | sed -e "s#/test/#/src/#")"
	export NEEDSOME_TESTEE="$NEEDSOME_TESTEE_DIR/$NEEDSOME_TEST_TESTCASE"
	functionsbefore="$(getfunctions)"
	. $1
	functionsnew="$(getfunctions)"
	fct="$(diff <(echo "$functionsbefore") <(echo "$functionsnew") | grep -E "^>" | cut -c 3- | grep -v " function ")"
	before_x="$(echo "$fct" | grep -E '^before$' | cat)"
	after_x="$(echo "$fct" | grep -E '^after$' | cat)"
	for t in $(echo "$fct" | grep -vE '^before$' | grep -vE '^after$' | cat); do
		methodbody="$(declare -f $t | head -n -1 | tail -n +3)"
		notest="$(echo "$methodbody" | grep -E "^\\s*@noTest\\s*;\\s*$" )"
		if [ -z "$notest" ]; then
			origtestname="$(echo "$methodbody" | grep -E "^\\s*@testName\\s+" | xargs | cut -d " " -f 2- | cat | tr -d "\"';")"
			skipped="$(echo "$methodbody" | grep -E "^\\s*@skip\\s*;\\s*$" )"
			parameters="$(echo "$methodbody" | grep -E "^\\s*@parameters\\s+" | sed -e 's/\s*@parameters//' | sed -e 's/;$//')"
			while read paramline; do
				paramline="$(echo "$paramline" | sed -e 's/\\n/\n/g' | sed -e 's/\\t/\t/g')"
				testname="$origtestname"
				if [ -z "$testname" ]; then
					testname="$NEEDSOME_TEST_TESTCASE-$t"
				else
					testname="$(
						eval "set -- $paramline
							echo $testname"
					)"
				fi
				if [ -z "$skipped" ]; then
					callmethod "$t $paramline" "$before_x" "$after_x" "$testname"
				else
					COUNTSUM=$(( $COUNTSUM + 1 ))
					COUNTSKIPPED=$(( $COUNTSKIPPED + 1 ))
					call_extended_status "$testname" skipit
				fi
			done < <(echo "$parameters")
		fi
	done
	for t in $fct; do
		unset -f "$t"
	done
}

function @testName() {
	return 0
}

function @skip() {
	return 0
}

function @noTest() {
	return 0
}

function @parameters() {
	return 0
}

function callmethod() {
	testcmd=""
	if [ ! -z "$2" ]; then
		testcmd="before
"
	fi
	testcmd="${testcmd}$1"
	if [ ! -z "$3" ]; then
		testcmd="${testcmd}
after"
	fi
	COUNTSUM=$(( $COUNTSUM + 1 ))
	if [ -z "$skipcoverage" ]; then
		start_coverage "$TEMPDIR/temp_coverage"
	fi

	call_extended_status "$4" execit "$testcmd"
	returncode=$?

	if [ "$returncode" = 0 ]; then
		COUNTSUCC=$(( $COUNTSUCC + 1 ))
	elif [ "$returncode" = 1 ]; then
		COUNTFAIL=$(( $COUNTFAIL + 1 ))
	else
		COUNTERROR=$(( $COUNTERROR + 1 ))
	fi

	if [ -z "$skipcoverage" ]; then
		end_coverage "$TEMPDIR/coverage"
	fi
	return $returncode
}

function execit {
	cmd="$1"
	echo "#!/bin/bash" > "$TEMPDIR/exec"

init_extended_status

	init-mockstore

	echo "set -e" >> "$TEMPDIR/exec"
	#DEBUG: echo 'export PS4='"'"'~|${BASH_SOURCE}|${LINENO}|COMMANDSTART|${BASH_COMMAND}|COMMANDEND|'"'" >> "$TEMPDIR/exec"
	#DEBUG: echo "set -x" >> "$TEMPDIR/exec"
	if [ ! -z "$cmd" ]; then
		echo "export PATH=$TEMPDIR/mockpath" >> "$TEMPDIR/exec"
		for c in echo grep cut cat tac test head tail tr sed awk dirname basename xargs wc ls ln readlink need-some-init; do
			mock-origpath $c
		done
		echo "$cmd" >> "$TEMPDIR/exec"
		echo "export PATH=$ORIGPATH" >> "$TEMPDIR/exec"	
	fi
	chmod +x "$TEMPDIR/exec"

	errors=$( . $TEMPDIR/exec )
	result=$?
	if [ "$result" -ne 0 ]; then
		if [ -z "$errors" ]; then
			errors="unknown error level $result"
			state="error"
			returncode=2
		else
			state="fail"
			returncode=1
		fi
		level="ERROR"
	else
		state="pass"
		level="OK"
		returncode=0
	fi
	set_extended_status "$level" "$state" "$errors"

	close_extended_status

	return $returncode
}

function skipit {
	init_extended_status
	state="skip"
	level="WARN"
	set_extended_status "$level" "$state" "skipped test"

	close_extended_status
}

function init-mockstore {
	#TODO: try without filesystem
	echo "" > $TEMPDIR/mockstore
	rm -rf $TEMPDIR/mockpath
	mkdir $TEMPDIR/mockpath
}

function create-mock {

	# mock lines from last to first
	(
	if [ ! -z "$2" ]; then
		echo "$1|if $2; then"
	fi
	echo "$3" | while read line; do
		echo "$1|$line"
	done
	echo "$1|exit"
	if [ ! -z "$2" ]; then
		echo "$1|fi"
	fi
	) | tac >> $TEMPDIR/mockstore

	/bin/rm -f $TEMPDIR/mockpath/$1
	echo '
		if [ ! -e '$TEMPDIR/mockpath/$1'.count ]; then
			MOCKRUN=0
		else
			MOCKRUN=$(< '$TEMPDIR/mockpath/$1'.count )
		fi
		MOCKRUN=$(( $MOCKRUN + 1 ))
		echo $MOCKRUN > '$TEMPDIR/mockpath/$1'.count
	' > $TEMPDIR/mockpath/$1
	cat "$TEMPDIR/mockstore" | grep -F "$1|" | tac | cut -d "|" -f 2- >> $TEMPDIR/mockpath/$1
	/bin/chmod +x $TEMPDIR/mockpath/$1
}

function mock-function {
	create-mock "$@"
}

export -f mock-function

function mock-echo {
	lines="$(echo "$3" | while IFS= read -r line; do
		echo "echo \"$line\""
	done)"
	mock-function "$1" "$2" "$lines"
}

export -f mock-echo

function mock-origpath {
	mockcmd="$(export PATH=$ORIGPATH; which "$1")"
	ln -s "$mockcmd" "$TEMPDIR/mockpath/$1"
}

export -f mock-origpath

function enable-xtrace() {
	export PS4='~|${BASH_SOURCE}|${LINENO}|COMMANDSTART|${BASH_COMMAND}|COMMANDEND|'
	set -x
	export SHELLOPTS
}
export -f enable-xtrace

